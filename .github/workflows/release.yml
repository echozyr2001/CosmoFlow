name: Release and Publish

on:
  workflow_dispatch:
    inputs:
      reason:
        description: "Release reason (optional, for release notes)"
        required: false
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  # 🔍 Version detection and validation
  detect-and-prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.prepare.outputs.version }}
      should_continue: ${{ steps.prepare.outputs.should_continue }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Auto-detect version and validate
        id: prepare
        run: |
          # 1. Auto-detect version from Cargo.toml
          version=$(grep '^version = ' cosmoflow/Cargo.toml | cut -d'"' -f2)
          echo "✓ Auto-detected version: $version"

          # 2. Validate version format
          if [[ ! "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $version"
            exit 1
          fi

          # 3. Check if this version is already released
          if git tag | grep -q "^v$version$"; then
            echo "❌ Version v$version already exists"
            echo "💡 Please update version in Cargo.toml before release"
            exit 1
          fi

          # Output results
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "should_continue=true" >> $GITHUB_OUTPUT

          echo "✅ Version validation completed:"
          echo "  Version: $version"

  # 🔍 Quick validation - always executed
  quick-validation:
    needs: detect-and-prepare
    if: needs.detect-and-prepare.outputs.should_continue == 'true'
    runs-on: ubuntu-latest
    outputs:
      validation_passed: ${{ steps.validate.outputs.passed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Quick validation
        id: validate
        run: |
          version="${{ needs.detect-and-prepare.outputs.version }}"
          echo "🔍 Quick validation started for v$version..."

          # 1. Syntax check
          echo "🔧 Checking code syntax..."
          cargo check --workspace --all-features

          # 2. Basic compilation test
          echo "🏗️ Basic compilation test..."
          cargo build --features minimal
          cargo build --all-features

          echo "✅ Quick validation passed"
          echo "passed=true" >> $GITHUB_OUTPUT

  # 📋 Comprehensive testing
  comprehensive-testing:
    needs: [detect-and-prepare, quick-validation]
    if: needs.quick-validation.outputs.validation_passed == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]
        features:
          - "--no-default-features"
          - "--features minimal"
          - "--features basic"
          - "--features standard"
          - "--all-features"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          cache: true
          cache-directories: |-
            ~/.cargo/registry
            ~/.cargo/git
            target

      - name: Setup Nextest
        uses: taiki-e/install-action@nextest

      - name: Run comprehensive test suite
        run: |
          echo "🧪 Running comprehensive tests"
          echo "🦀 Rust: ${{ matrix.rust }}"
          echo "🔧 Features: ${{ matrix.features }}"

          # Unit tests
          cargo nextest run ${{ matrix.features }} --workspace

          # Documentation tests
          cargo test --doc ${{ matrix.features }} --workspace

          # Build verification
          cargo build ${{ matrix.features }} --workspace --release

          # Additional safety checks for stable + all-features configuration
          if [[ "${{ matrix.features }}" == "--all-features" && "${{ matrix.rust }}" == "stable" ]]; then
            echo "🔍 Running additional safety checks..."
            
            # Clippy check
            cargo clippy ${{ matrix.features }} --workspace --all-targets -- -D warnings
            
            # Format check
            cargo fmt --all -- --check
            
            # Dependency security audit (allow failure)
            cargo audit || echo "⚠️ Audit found issues, but not blocking release"
          fi

  # 🏷️ Auto-create tag
  create-release-tag:
    needs: [detect-and-prepare, quick-validation, comprehensive-testing]
    if: |
      always() &&
      needs.quick-validation.outputs.validation_passed == 'true' &&
      needs.comprehensive-testing.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      tag_created: ${{ steps.tag.outputs.created }}
      release_notes: ${{ steps.notes.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Generate release notes
        id: notes
        run: |
          version="${{ needs.detect-and-prepare.outputs.version }}"
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          # Generate changelog
          if [[ -n "$last_tag" ]]; then
            echo "## 🚀 Release v$version" > release_notes.md
            echo "" >> release_notes.md
            
            # Add user-provided release reason
            if [[ -n "${{ inputs.reason }}" ]]; then
              echo "### 📝 Release Notes" >> release_notes.md
              echo "${{ inputs.reason }}" >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            echo "### 🔄 Changes since $last_tag" >> release_notes.md
            git log ${last_tag}..HEAD --pretty=format:"- %s (%h)" >> release_notes.md
            echo "" >> release_notes.md
            
            # 分类变更 / Categorize changes
            echo "### 📊 Change Summary" >> release_notes.md
            breaking=$(git log ${last_tag}..HEAD --oneline | grep -i "breaking\|BREAKING" | wc -l)
            features=$(git log ${last_tag}..HEAD --oneline | grep -i "feat\|feature\|add" | wc -l)
            fixes=$(git log ${last_tag}..HEAD --oneline | grep -i "fix\|bug" | wc -l)
            
            echo "- 🚨 Breaking Changes: $breaking" >> release_notes.md
            echo "- ✨ New Features: $features" >> release_notes.md
            echo "- 🐛 Bug Fixes: $fixes" >> release_notes.md
          else
            echo "## 🚀 Release v$version" > release_notes.md
            echo "" >> release_notes.md
            echo "Initial release of CosmoFlow!" >> release_notes.md
          fi

          # Output content
          content=$(cat release_notes.md)
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create tag
        id: tag
        run: |
          version="${{ needs.detect-and-prepare.outputs.version }}"
          tag="v$version"

          # Create annotated tag
          git tag -a "$tag" -F release_notes.md

          # Push tag
          git push origin "$tag"
          echo "created=true" >> $GITHUB_OUTPUT
          echo "✅ Tag $tag created successfully"

  # 📦 Build and package
  build-and-package:
    needs: [detect-and-prepare, create-release-tag]
    if: needs.create-release-tag.outputs.tag_created == 'true'
    runs-on: ubuntu-latest
    outputs:
      package_ready: ${{ steps.package.outputs.ready }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build release version
        run: |
          echo "🏗️ Building release version..."
          cargo build --release --all-features --workspace

      - name: Create package
        id: package
        run: |
          echo "📦 Creating package..."
          cargo package --manifest-path cosmoflow/Cargo.toml --allow-dirty
          echo "ready=true" >> $GITHUB_OUTPUT

  # 🚀 Publish to Crates.io
  publish-to-crates:
    needs: [detect-and-prepare, create-release-tag, build-and-package]
    if: needs.build-and-package.outputs.package_ready == 'true'
    runs-on: ubuntu-latest
    environment:
      name: crates-io
      url: https://crates.io/crates/cosmoflow
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to Crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          version="${{ needs.detect-and-prepare.outputs.version }}"
          echo "🚀 Publishing CosmoFlow v$version to Crates.io..."

          # Publish main package
          cargo publish --manifest-path cosmoflow/Cargo.toml

          echo "✅ Published successfully!"
          echo "📦 CosmoFlow v$version can now be installed via 'cargo install cosmoflow'"

  # 📝 Create GitHub Release (Draft)
  create-github-release:
    needs: [detect-and-prepare, create-release-tag, publish-to-crates]
    if: always() && needs.create-release-tag.outputs.tag_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create GitHub Release Draft
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.detect-and-prepare.outputs.version }}
          release_name: 🚀 CosmoFlow v${{ needs.detect-and-prepare.outputs.version }}
          body: |
            ${{ needs.create-release-tag.outputs.release_notes }}

            ---

            **📝 Release Process**

            This release was created through the automated one-click workflow with comprehensive testing:
            - ✅ Quick validation passed
            - ✅ Comprehensive testing across multiple Rust versions and feature combinations
            - ✅ Package built and published to Crates.io

            **🔍 Next Steps**

            This GitHub release is created as a **draft** for safety. Please:
            1. Review the release notes above
            2. Verify the package is available on [Crates.io](https://crates.io/crates/cosmoflow)
            3. Test the published package if needed: `cargo install cosmoflow`
            4. Manually publish this release when ready

            **🛡️ Safety Note**

            Creating releases as drafts prevents accidental public announcements and allows for final manual review before making the release public.
          draft: true
          prerelease: false

  # 📊 Post-release processing
  post-release:
    needs: [detect-and-prepare, create-github-release, publish-to-crates]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Release summary
        run: |
          version="${{ needs.detect-and-prepare.outputs.version }}"

          echo "## 🎉 One-Click Release Process Completed!"
          echo ""
          echo "### 📋 Release Information"
          echo "- **Version**: v$version"
          echo "- **Testing Strategy**: Comprehensive (all feature combinations)"
          echo "- **Rust Versions Tested**: stable, beta"
          echo "- **Features Tested**: minimal, basic, standard, all-features"
          echo "- **Workflow Status**: ${{ job.status }}"
          echo ""

          echo "### 📦 Package Status"
          if [[ "${{ needs.publish-to-crates.result }}" == "success" ]]; then
            echo "✅ **Crates.io**: Package published successfully"
            echo "   📥 Install with: \`cargo install cosmoflow\`"
          else
            echo "❌ **Crates.io**: Package publish failed or was skipped"
          fi
          echo ""

          echo "### 📝 GitHub Release Status"
          if [[ "${{ needs.create-github-release.result }}" == "success" ]]; then
            echo "✅ **GitHub Release**: Draft created successfully"
            echo "   🔗 Review at: https://github.com/${{ github.repository }}/releases"
            echo ""
            echo "### 🔄 Next Steps for Maintainers"
            echo "1. **Review**: Check the draft release notes and package"
            echo "2. **Verify**: Test installation: \`cargo install cosmoflow\`"
            echo "3. **Publish**: Manually publish the draft release when ready"
            echo "4. **Announce**: Share the release with the community"
          else
            echo "❌ **GitHub Release**: Draft creation failed"
          fi
          echo ""

          echo "### 🛡️ Safety Features Applied"
          echo "- ✅ Version validation (prevented duplicates)"
          echo "- ✅ Comprehensive testing (multiple Rust versions)"
          echo "- ✅ Git tag created automatically"
          echo "- ✅ Draft release (manual review required)"
          echo ""

          echo "---"
          echo "🚀 **One-Click Release Workflow v2.0** - Optimized for safety and automation"
